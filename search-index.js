var searchIndex = JSON.parse('{\
"propagate":{"doc":"Error propagation tracing in Rust.","t":[12,3,13,3,13,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,8,11,11,11,11,11,10],"n":["0","CodeLocation","Err","ErrorTrace","Ok","Result","Traced","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone_into","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_output","from_residual","from_residual","hash","into","into","into","ne","ne","ne","report","result","to_owned","to_string","to_string","trace","trace","trace","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","1","Err","Ok","Result","as_mut","as_ref","err","err_trace","expect","expect_err","is_err","is_ok","map_err","new_err","ok","to_std","transpose","unwrap","unwrap_err","unwrap_or","unwrap_or_default","unwrap_or_else","0","0","1","0","CodeLocation","ErrorTrace","Traced","down_by","here","new","new","to_strings","trace"],"q":["propagate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","propagate::Result","","","propagate::result","","","","","","","","","","","","","","","","","","","","","propagate::result::Result","","","propagate::trace","","","","","","","","",""],"d":["","Represents a location (filename, line number) in the …","Contains the error value and associated error trace.","A stack of code locations forming an error trace.","Contains the success value.","A replacement for <code>std::result::Result</code> that supports …","A trait denoting “stack-like” types that can be used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a new result type.","","","","Defines types for error tracing.","","","","","","","","","","","","","","","Contains the error value and associated error trace.","Contains the success value.","A replacement for <code>std::result::Result</code> that supports …","Converts from <code>&amp;mut Result&lt;T, E, S&gt;</code> to …","Converts from <code>&amp;Result&lt;T, E, S&gt;</code> to <code>Result&lt;&amp;T, &amp;E, &amp;S&gt;</code>.","Converts from <code>Result&lt;T, E, S&gt;</code> to <code>Option&lt;E&gt;</code>.","Converts from <code>Result&lt;T, E, S&gt;</code> to <code>Option&lt;(E, S)&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Ok</code>.","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Constructs a new error result from the provided error …","Converts from <code>Result&lt;T, E, S&gt;</code> to <code>Option&lt;T&gt;</code>.","Converts from <code>Result&lt;T, E, S&gt;</code> to <code>std::result::Result&lt;T, E&gt;</code>.","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","","","","","Represents a location (filename, line number) in the …","A stack of code locations forming an error trace.","A trait denoting “stack-like” types that can be used …","Returns the <code>CodeLocation</code> that is <code>lines</code> lines below <code>self</code>, …","Returns the code location at the site of the caller.","","Constructs a new code location stack with the caller at …","",""],"i":[1,0,2,0,2,0,0,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,1,2,3,3,1,2,2,2,2,2,3,1,2,3,1,2,0,3,3,1,0,4,1,2,3,1,2,3,1,2,3,1,5,6,6,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,6,6,1,0,0,0,3,3,3,1,1,4],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],[[],["codelocation",3]],[[]],[[],["errortrace",3]],[[["result",4]],["bool",15]],[[["codelocation",3]],["bool",15]],[[["errortrace",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["location",3]]],[[]],[[]],[[]],[[["infallible",4],["result",4,["infallible"]]]],[[["result",4,["infallible"]],["infallible",4]]],[[]],[[]],[[]],[[]],[[["result",4]],["bool",15]],[[["codelocation",3]],["bool",15]],[[["errortrace",3]],["bool",15]],[[],["i32",15]],null,[[]],[[],["string",3]],[[],["string",3]],null,[[["location",3]]],[[["location",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[["str",15]]],[[["str",15]]],[[],["bool",15]],[[],["bool",15]],[[["fnonce",8]],["result",4]],[[]],[[],["option",4]],[[],["result",4]],[[],[["result",4],["option",4,["result"]]]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],null,null,null,null,null,null,null,[[["u32",15]]],[[]],[[["u32",15],["str",15]]],[[]],[[],[["string",3],["vec",3,["string"]]]],[[["location",3]]]],"p":[[3,"ErrorTrace"],[4,"Result"],[3,"CodeLocation"],[8,"Traced"],[13,"Ok"],[13,"Err"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};